#include "Arduino_BMI270_BMM150.h"
#include "math.h"

const float pi = 3.14159;
const float k = 0.4;                   // Complementary filter constant
const float cutoff_angle = 30.0;       // Max angle before recovery burst
bool reference_angle_computed = false;
bool new_filtered_angle = false;

float ax, ay, az;
float gx, gy, gz;
float theta_a, theta_g, theta_k, theta_k_prev;
unsigned long prev_time, present_time;
float elapsed_time;
float integral = 0;

int A1_MD = 5;
int A2_MD = 4;
int B1_MD = 2;
int B2_MD = 3;
int duty_cycle = 0;

// PID Gains
const float kp = 25;
const float ki = 2;
const float kd = 0.9;

float pid_p, pid_i = 0, pid_d;
float dutycycle_drive;

void setup() {
  pinMode(A1_MD, OUTPUT);
  pinMode(A2_MD, OUTPUT);
  pinMode(B1_MD, OUTPUT);
  pinMode(B2_MD, OUTPUT);

  if (!IMU.begin()) {
    while (1);  // IMU failed to initialize
  }

  Serial.begin(115200);
}

void loop() {

  // === Read IMU Acceleration ===
  if (IMU.accelerationAvailable()) {
    IMU.readAcceleration(ax, ay, az);
    theta_a = (180 / pi) * atan(ay / az);

    if (!reference_angle_computed) {
      prev_time = micros();
      theta_g = theta_a;
      theta_k = theta_a;
      theta_k_prev = theta_k;
      reference_angle_computed = true;
    }
  }

  // === Read IMU Gyroscope ===
  if (IMU.gyroscopeAvailable()) {
    IMU.readGyroscope(gx, gy, gz);

    if (reference_angle_computed) {
      present_time = micros();
      elapsed_time = (float)(present_time - prev_time) / 1e6;
      prev_time = present_time;

      // ⚠️ Adjust axis if needed — gy is pitch for many robots
      theta_g = theta_g + (-gy) * elapsed_time;
      theta_k = k * (theta_k_prev + (-gy) * elapsed_time) + (1 - k) * theta_a;

      new_filtered_angle = true;
    }
  }

  // === PID Control and Motor Output ===
  if (new_filtered_angle) {

    // === Emergency Recovery Mode ===
    if (theta_k > cutoff_angle) {
      analogWrite(A1_MD, 255);
      digitalWrite(A2_MD, LOW);
      analogWrite(B1_MD, 255);
      digitalWrite(B2_MD, LOW);

      integral = 0;
      theta_k_prev = theta_k;
      new_filtered_angle = false;

      Serial.println("Recovery: Forward tilt");

      return;
    }

    if (theta_k < -cutoff_angle) {
      digitalWrite(A1_MD, LOW);
      analogWrite(A2_MD, 255);
      digitalWrite(B1_MD, LOW);
      analogWrite(B2_MD, 255);

      integral = 0;
      theta_k_prev = theta_k;
      new_filtered_angle = false;

      Serial.println("Recovery: Backward tilt");

      return;
    }

    // === PID Control ===
    pid_d = kd * (theta_k - theta_k_prev) / elapsed_time;
    pid_p = kp * theta_k;
    integral += theta_k * elapsed_time;
    pid_i = constrain(ki * integral, -255, 255);

    dutycycle_drive = pid_p + pid_i + pid_d;
    duty_cycle = constrain(abs(int(dutycycle_drive)), 0, 255);

    // === Motor Control Based on PID Output ===
    if (dutycycle_drive > 0) {
      // Forward tilt — push backward
      analogWrite(A1_MD, duty_cycle);
      digitalWrite(A2_MD, LOW);
      analogWrite(B1_MD, duty_cycle);
      digitalWrite(B2_MD, LOW);
    } else if (dutycycle_drive < 0) {
      // Backward tilt — push forward
      digitalWrite(A1_MD, LOW);
      analogWrite(A2_MD, duty_cycle);
      digitalWrite(B1_MD, LOW);
      analogWrite(B2_MD, duty_cycle);
    } else {
      // Balanced — stop motors
      digitalWrite(A1_MD, LOW);
      digitalWrite(A2_MD, LOW);
      digitalWrite(B1_MD, LOW);
      digitalWrite(B2_MD, LOW);
    }

    // === Debug Output ===
    Serial.print("Theta_k: ");
    Serial.print(theta_k);
    Serial.print(" | PID: ");
    Serial.print(pid_p + pid_i + pid_d);
    Serial.print(" | Duty: ");
    Serial.println(duty_cycle);

    new_filtered_angle = false;
    theta_k_prev = theta_k;
  }
}
